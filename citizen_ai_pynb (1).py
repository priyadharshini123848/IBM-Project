# -*- coding: utf-8 -*-
"""Citizen AI.pynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jjZ-dBg7blxskgE4udASGjgH5qLhSVoU
"""

!pip install transformers torch  gradio -q

import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM

# 1. Load model and tokenizer
model_name = "ibm-granite/granite-3.2-2b-instruct"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)

if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token

# 2. Generate response function
def generate_response(prompt, max_length=1024):
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)

    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}

    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=0.7,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id
        )

    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    response = response.replace(prompt, "").strip()
    return response

# 3. Citizen AI interaction function
def citizen_interaction(query):
    prompt = (
        "You are a helpful civic assistant. Provide accurate and helpful information about the following citizen query related to public services, "
        "government policies, or civic issues.\n\nQuery: "
        + query +
        "\nResponse:"
    )
    return generate_response(prompt, max_length=1000)

# 4. Gradio Interface
with gr.Blocks() as app:
    gr.Markdown("# Citizen AI: Civic Analysis & Citizen Services AI")

    with gr.Tabs():
        with gr.TabItem("Civic Analysis"):
            with gr.Row():
                with gr.Column():
                    city_name = gr.Textbox(
                        label="Enter City Name",
                        placeholder="Enter city name for civic analysis",
                        lines=1,
                    )
                    analyze_btn = gr.Button("Analyze City")

                with gr.Column():
                    analysis_output = gr.Textbox(label="Civic Analysis Report", lines=15)

            def civic_analysis(city):
                prompt = (
                    f"Provide a detailed analysis of {city}, including crime index, road and safety statistics, accident rates, "
                    "traffic safety information, and overall safety assessment."
                )
                return generate_response(prompt, max_length=900)

            analyze_btn.click(civic_analysis, inputs=city_name, outputs=analysis_output)

        with gr.TabItem("Citizen Services"):
            with gr.Row():
                with gr.Column():
                    citizen_query = gr.Textbox(
                        label="Your Query",
                        placeholder="Ask about public services, government policies, civic issues...",
                        lines=4,
                    )
                    query_btn = gr.Button("Get Information")

                with gr.Column():
                    citizen_output = gr.Textbox(label="Government Response", lines=15)

            query_btn.click(citizen_interaction, inputs=citizen_query, outputs=citizen_output)

# 5. Launch app
app.launch(share=True)